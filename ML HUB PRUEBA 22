local library = loadstring(game:HttpGet("https://raw.githubusercontent.com/memejames/elerium-v2-ui-library//main/Library", true))()

local whitelist = { 1168915031, 2002271267, 1664200351, 4473738491 }

local Players = game:GetService("Players")
local player = Players.LocalPlayer
local playerId = player.UserId

print("👤 Player ID detected:", playerId)

local isWhitelisted = false
for _, id in ipairs(whitelist) do
    if id == playerId then
        isWhitelisted = true
        break
    end
end

if not isWhitelisted then
    warn("❌ Access denied for ID:", playerId)
    player:Kick("🚫 You are not allowed to use this script")
    return
end

-- Services
local HttpService = game:GetService("HttpService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local VirtualInputManager = game:GetService("VirtualInputManager")
local Lighting = game:GetService("Lighting")
local RunService = game:GetService("RunService") -- Added for potential future use or better waits

-- Player specific variables (assuming leaderstats and folders exist)
local leaderstats = player:WaitForChild("leaderstats")
local petsFolder = player:WaitForChild("petsFolder")
local ultimatesFolder = player:WaitForChild("ultimatesFolder")
local muscleEvent = player:WaitForChild("muscleEvent") -- Assuming this exists directly under player

local startTime = os.time()
local startRebirths = leaderstats and leaderstats:FindFirstChild("Rebirths") and leaderstats.Rebirths.Value or 0

-- State Variables
local isRunning = false
local targetRebirth = math.huge
local isGrinding = false

-- Create main window
local window = library:AddWindow("ML HUB", {
    main_color = Color3.fromRGB(0,0,0),
    min_size = Vector2.new(580, 660),
    can_resize = true,
})

-- Title Animation Coroutine
coroutine.wrap(function()
    local baseTitle = "XYZx Private Script, Rebirth Bypasser"
    local forward = true
    local index = 1
    while window and window.Enabled do -- Stop if window is closed/destroyed
        local currentText = string.sub(baseTitle, 1, index)
        window.Name = currentText

        if forward then
            index = index + 1
            if index > #baseTitle then
                forward = false
                task.wait(0.5) -- Pause at full title
            else
                 task.wait(0.05)
            end
        else
            index = index - 1
            if index < 1 then
                forward = true
                task.wait(0.5) -- Pause when empty
            else
                task.wait(0.03)
            end
        end
        if not window or not window.Enabled then break end -- Check again after wait
        task.wait() -- Yield briefly
    end
end)()


-- Utility Functions
local function formatNumber(number)
    if number >= 1e15 then return string.format("%.2fQ", number/1e15)
    elseif number >= 1e12 then return string.format("%.2fT", number/1e12)
    elseif number >= 1e9 then return string.format("%.2fB", number/1e9)
    elseif number >= 1e6 then return string.format("%.2fM", number/1e6)
    elseif number >= 1e3 then return string.format("%.2fK", number/1e3)
    end
    return tostring(math.floor(number))
end

local function unequipAllPets()
    if not petsFolder then return end
    for _, folder in pairs(petsFolder:GetChildren()) do
        if folder:IsA("Folder") then
            for _, pet in pairs(folder:GetChildren()) do
                if pet:FindFirstChild("equipped") and pet.equipped.Value == true then
                     ReplicatedStorage.rEvents.equipPetEvent:FireServer("unequipPet", pet)
                     task.wait(0.01) -- Small delay between unequip events
                end
            end
        end
    end
    task.wait(0.1) -- Wait a bit longer after all unequips
end

local function equipUniquePet(petName)
    unequipAllPets()
    task.wait(0.05) -- Ensure unequipping finishes
    local uniqueFolder = petsFolder and petsFolder:FindFirstChild("Unique")
    if not uniqueFolder then
        warn("Unique pets folder not found!")
        return
    end
    for _, pet in pairs(uniqueFolder:GetChildren()) do
        if pet.Name == petName then
            ReplicatedStorage.rEvents.equipPetEvent:FireServer("equipPet", pet)
            task.wait(0.05) -- Wait for equip confirmation (optional)
            break -- Assume only one pet with this name needs equipping
        end
    end
end

local function findMachine(machineName)
    local machine = workspace.machinesFolder:FindFirstChild(machineName)
    if not machine then
        -- Broader search if not in the primary folder
        for _, potentialFolder in pairs(workspace:GetChildren()) do
            if potentialFolder:IsA("Folder") and potentialFolder.Name:lower():find("machines") then
                machine = potentialFolder:FindFirstChild(machineName)
                if machine then break end
            end
        end
    end
    if not machine then
        warn("Machine not found:", machineName)
    end
    return machine
end

local function pressE()
    VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.E, false, game)
    task.wait(0.05) -- Hold E slightly longer
    VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.E, false, game)
    task.wait(0.05)
end

local function useOneEgg()
    -- This function is defined but not used in the provided logic.
    -- Keep it in case it's needed later.
    ReplicatedStorage.rEvents.proteinEggEvent:FireServer("useEgg")
    print("Used one protein egg (if available)")
end

-- Create Tabs
local rebirthTab = window:AddTab("Rebirth")
local statsTab = window:AddTab("Statistics")
local performanceTab = window:AddTab("Performance")
local creditsTab = window:AddTab("Credits")

-- Stats Tab Setup
statsTab:AddLabel("[ Main Progress ]")
local rebirthLabel = statsTab:AddLabel("Current Rebirths: 0")
local gainedLabel = statsTab:AddLabel("Gained Rebirths: 0")
local timerLabel = statsTab:AddLabel("Runtime: 00:00:00")

statsTab:AddLabel("[ Rate Analysis ]")
local perMinLabel = statsTab:AddLabel("Rebirths Per Minute: 0")
local perHourLabel = statsTab:AddLabel("Rebirths Per Hour: 0")
local halfDayLabel = statsTab:AddLabel("Rebirths (12 Hours): 0")
local perDayLabel = statsTab:AddLabel("Rebirths Per Day: 0")

statsTab:AddLabel("[ Advanced Metrics ]")
local averageLabel = statsTab:AddLabel("Average Rates: 0/m | 0/h | 0/d")
-- local efficiencyLabel = statsTab:AddLabel("Farm Efficiency: 0%") -- Commented out as calculation seems unclear

-- Rebirth Tab Setup
rebirthTab:AddLabel("Rebirth Farm Settings")

rebirthTab:AddTextBox("Target Rebirth", function(text)
    local num = tonumber(text)
    targetRebirth = (num and num > 0) and num or math.huge
    print("Target Rebirth set to:", targetRebirth)
end)

local packFarmSwitch = rebirthTab:AddSwitch("Pack Farm", function(bool)
    isRunning = bool
    print("Pack Farm Toggled:", isRunning)

    if not isRunning then return end -- Stop if toggled off

    task.spawn(function()
        while isRunning do
            local currentRebirths = leaderstats.Rebirths.Value
            if currentRebirths >= targetRebirth then
                print("Target rebirth reached!")
                isRunning = false
                packFarmSwitch:SetValue(false) -- Update the switch UI
                break
            end

            local rebirthCost = 10000 + (5000 * currentRebirths)
            local goldenRebirth = ultimatesFolder and ultimatesFolder:FindFirstChild("Golden Rebirth")
            if goldenRebirth then
                rebirthCost = math.floor(rebirthCost * (1 - (goldenRebirth.Value * 0.1)))
            end

            print("Equipping Swift Samurai for strength gain...")
            equipUniquePet("Swift Samurai")
            task.wait(0.2) -- Wait after equipping

            print("Gaining strength...")
            while isRunning and leaderstats.Strength.Value < rebirthCost do
                -- Fire strength gain event multiple times for efficiency
                for i = 1, 50 do
                     if not isRunning then break end -- Check inside inner loop too
                     muscleEvent:FireServer("rep")
                end
                task.wait() -- Yield after a batch
                 if not isRunning then break end -- Check again before next loop iteration
            end
            if not isRunning then break end -- Exit if toggled off during strength gain

            print("Equipping Tribal Overlord for rebirth...")
            equipUniquePet("Tribal Overlord")
            task.wait(0.2) -- Wait after equipping

            local machine = findMachine("Jungle Bar Lift")
            if machine then
                 local seat = machine:FindFirstChild("interactSeat")
                 if seat and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                     print("Moving to machine...")
                     player.Character.HumanoidRootPart.CFrame = seat.CFrame * CFrame.new(0, 3, 0)
                     task.wait(0.5) -- Wait for teleport stabilization

                     local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
                     if humanoid and not humanoid.Sit then
                         print("Interacting with machine...")
                         local attempts = 0
                         repeat
                             pressE()
                             task.wait(0.1)
                             humanoid = player.Character:FindFirstChildOfClass("Humanoid") -- Re-check humanoid state
                             attempts = attempts + 1
                         until not isRunning or (humanoid and humanoid.Sit) or attempts > 10 -- Exit if sitting, stopped, or too many attempts
                         if attempts > 10 then warn("Failed to sit on machine.") end
                     end
                 else
                     warn("Machine seat or player character/HRP not found.")
                 end
            else
                 warn("Jungle Bar Lift machine not found, skipping interaction.")
            end
            if not isRunning then break end -- Check after machine interaction attempt

            local initialRebirths = leaderstats.Rebirths.Value
            print("Attempting rebirth...")
            local rebirthAttempts = 0
            repeat
                ReplicatedStorage.rEvents.rebirthRemote:InvokeServer("rebirthRequest")
                task.wait(0.1) -- Slightly longer delay between rebirth requests
                rebirthAttempts = rebirthAttempts + 1
            until not isRunning or leaderstats.Rebirths.Value > initialRebirths or rebirthAttempts > 10 -- Exit if rebirthed, stopped, or too many attempts

            if leaderstats.Rebirths.Value > initialRebirths then
                print("Rebirth successful!")
            elseif rebirthAttempts > 10 then
                 warn("Rebirth failed after multiple attempts.")
            end

            if not isRunning then break end -- Final check before looping
            task.wait(0.5) -- Small delay before starting next cycle
        end
        print("Pack Farm loop finished.")
        if packFarmSwitch:GetValue() and not isRunning then -- Ensure switch is off if loop stopped internally
             packFarmSwitch:SetValue(false)
        end
    end)
end)


local speedGrindSwitch = rebirthTab:AddSwitch("Speed Grind (No Rebirth)", function(bool)
    isGrinding = bool -- Set the state variable *before* checking
    print("Speed Grind Toggled:", isGrinding)

    if not isGrinding then
        print("Stopping speed grind, unequipping pets...")
        unequipAllPets()
        return -- Exit the callback
    end

    print("Starting speed grind, equipping Swift Samurai...")
    equipUniquePet("Swift Samurai")
    task.wait(0.2)

    -- Spawn multiple threads to fire the event rapidly
    for i = 1, 12 do
        task.spawn(function()
            while isGrinding do
                muscleEvent:FireServer("rep")
                -- Using task.wait() is better than RunService.Heartbeat:Wait() here
                -- as it allows other scripts to run more easily.
                task.wait()
            end
            print("Speed grind thread", i, "stopped.")
        end)
    end
end)

-- Performance Tab Setup
performanceTab:AddLabel("Visual Optimizations")

local frameToggleSwitch = performanceTab:AddSwitch("Hide All Frames", function(bool)
    print("Hide All Frames Toggled:", bool)
    -- Iterate through PlayerGui instead of ReplicatedStorage for UI Frames
    local playerGui = player:FindFirstChildOfClass("PlayerGui")
    if playerGui then
        for _, gui in pairs(playerGui:GetChildren()) do
             -- You might want to be more specific here to avoid hiding essential core guis
             -- This example hides ScreenGuis that aren't CoreGuis and don't have 'IgnoreFrameHide' tag (example)
             if gui:IsA("ScreenGui") and not gui:FindFirstChild("IgnoreFrameHide") and not game:IsA("CoreGui") then
                 gui.Enabled = not bool
             end
        end
    end
    -- Example: Hiding specific frames if needed by name pattern (less common for general UI)
    -- for _, obj in pairs(ReplicatedStorage:GetChildren()) do
    --     if obj.Name:match("Frame$") and obj:IsA("GuiObject") then -- Check if it's actually a GUI object
    --         obj.Visible = not bool
    --     end
    -- end
end)


performanceTab:AddButton("Full Optimization", function()
    print("Applying full optimizations...")
    settings().Rendering.QualityLevel = Enum.QualityLevel.Level01
    settings().Physics.PhysicsEnvironmentalThrottle = Enum.EnviromentalPhysicsThrottle.Always
    settings().Rendering.MeshPartDetailLevel = Enum.MeshPartDetailLevel.Level01
    Lighting.GlobalShadows = false
    Lighting.FogEnd = 9e9
    Lighting.Brightness = 0 -- Example: Reduce brightness
    -- Changing GraphicsMode via script is often less effective or restricted. QualityLevel is preferred.
    -- settings().Rendering.GraphicsMode = Enum.GraphicsMode.NoGraphics -- Avoid NoGraphics unless absolutely necessary

    -- Optional: Disable specific lighting effects
    for _, effect in pairs(Lighting:GetChildren()) do
        if effect:IsA("PostEffect") then
            effect.Enabled = false
        end
    end
    print("Optimizations applied.")
end)

-- Credits Tab Setup
creditsTab:AddLabel("Welcome to ML HUB")
creditsTab:AddLabel("Version: 1.12 (Fixed)") -- Updated version
creditsTab:AddLabel("Date: " .. os.date("%d/%m/%Y")) -- Use current date
creditsTab:AddLabel("")
creditsTab:AddLabel("I hope you like it 😎")
creditsTab:AddLabel("Owner: Matias_XD2021")
creditsTab:AddLabel("Discord: xyz_ccz.")

-- Stats Update Loop
task.spawn(function()
    while task.wait(1) do -- Update stats every second
        if not leaderstats or not leaderstats:FindFirstChild("Rebirths") then continue end -- Ensure leaderstats are available

        local currentRebirths = leaderstats.Rebirths.Value
        local gainedRebirths = currentRebirths - startRebirths
        local elapsedTime = os.time() - startTime

        -- Prevent division by zero if elapsedTime is very small
        local rebirthsPerMinute = 0
        local rebirthsPerHour = 0
        if elapsedTime > 0 then
            rebirthsPerMinute = gainedRebirths / (elapsedTime / 60)
            rebirthsPerHour = gainedRebirths / (elapsedTime / 3600)
        end

        -- Update all stats labels safely
        if rebirthLabel and rebirthLabel.Parent then rebirthLabel.Text = string.format("Current Rebirths: %s", formatNumber(currentRebirths)) end
        if gainedLabel and gainedLabel.Parent then gainedLabel.Text = string.format("Gained Rebirths: %s", formatNumber(gainedRebirths)) end
        if perMinLabel and perMinLabel.Parent then perMinLabel.Text = string.format("Rebirths Per Minute: %s", formatNumber(rebirthsPerMinute)) end
        if perHourLabel and perHourLabel.Parent then perHourLabel.Text = string.format("Rebirths Per Hour: %s", formatNumber(rebirthsPerHour)) end
        if halfDayLabel and halfDayLabel.Parent then halfDayLabel.Text = string.format("Rebirths (12 Hours): %s", formatNumber(rebirthsPerHour * 12)) end
        if perDayLabel and perDayLabel.Parent then perDayLabel.Text = string.format("Rebirths Per Day: %s", formatNumber(rebirthsPerHour * 24)) end

        local hours = math.floor(elapsedTime / 3600)
        local minutes = math.floor((elapsedTime % 3600) / 60)
        local seconds = elapsedTime % 60
        if timerLabel and timerLabel.Parent then timerLabel.Text = string.format("Runtime: %02d:%02d:%02d", hours, minutes, seconds) end

        if averageLabel and averageLabel.Parent then
            averageLabel.Text = string.format("Average: %s/m | %s/h | %s/d",
                formatNumber(rebirthsPerMinute),
                formatNumber(rebirthsPerHour),
                formatNumber(rebirthsPerHour * 24))
        end

        --[[
        -- Efficiency calculation remains commented out due to unclear logic
        if efficiencyLabel and efficiencyLabel.Parent then
            local efficiencyValue = 0
            if currentRebirths > 0 then -- Avoid division by zero
                -- This calculation's meaning is unclear, kept as original but commented
                -- efficiencyValue = math.floor((rebirthsPerHour / currentRebirths) * 100)
                -- A possible alternative: Efficiency based on time per rebirth?
                -- local timePerRebirth = (gainedRebirths > 0) and (elapsedTime / gainedRebirths) or 0
                -- efficiencyValue = timePerRebirth -- Lower is better? Needs context.
            end
            efficiencyLabel.Text = string.format("Farm Efficiency: %d%%", efficiencyValue)
        end
        --]]

        -- Stop loop if the UI is closed
        if not window or not window.Enabled then break end
    end
    print("Stats update loop stopped.")
end)

print("ML HUB Loaded Successfully!"
